---
title: Quarto reveal.js clean
subtitle: A minimal and elegant presentation theme
date: last-modified
date-format: "DD MMMM, YYYY"
author:
  - name: Danilo Freire
    orcid: 0000-0002-4712-6810
    email: danilo.freire@emory.edu
    affiliations: Emory University
format:
  clean-revealjs:
    self-contained: true
    footer: "[My Presentation](https://danilofreire.github.io/)"
bibliography: references.bib
transition: slide
transition-speed: default
scrollable: true
engine: jupyter
editor:
  render-on-save: true
---

## Example slide

### This is a subtitle

Before we dive a bit deeper, here is a simple example of the
[clean theme](https://github.com/grantmcdermott/quarto-revealjs-clean)
in action. 

- No pictures or anything fancy. Just text for the moment.

:::{.incremental}
Next, we'll take a brief tour of some theme components.

- We'll use the same basic
structure as the
[original LaTeX slides](https://raw.githack.com/kylebutts/templates/master/latex-slides/auxiliary/slides.pdf).
- Note that the [_full suite_](https://quarto.org/docs/presentations/revealjs/)
of Reveal.js features are available for this Quarto implementation,
even if we don't cover everything here.
:::

## Before you proceed...

### Requirements for the coding examples in this demo

:::{.callout-note}
## R libraries

While the clean theme is language agnostic, we will use several R coding
examples in this demo to highlight some advanced theme features.

You will need the following libraries if you'd like to render the template
"as-is":

```{.r}
install.packages(c("modelsummary", "gt", "fixest", "pdftools", "tinytex", "threejs"))
```
:::


:::{.callout-note}
## TinyTex

While reveal.js presentations are HTML format, we will show an example of how to 
embed LaTeX tables as images. This requires a working Tex distribution, of which
TinyTex provides by far the easiest and lightest integration with Quarto. More
details [here](https://quarto.org/docs/output-formats/pdf-engine.html).

```{.bash}
quarto install tinytex
```
:::

# Components {background-color="#2d4563"}

## Components

### Ordered and Unordered Lists

:::: {.columns}

::: {.column width="50%"}
Here we have an unordered list.

:::{.incremental}
- first item
    - sub-item
- second item
:::
:::

::: {.column width="50%"}
And next we have an ordered one.

:::{.incremental}
1. first item
    i) sub-item
2. second item
:::
:::
::::

## Components

### Alerts & Cross-refs 

To emphasize specific words or text, you can:

- Use the default `.alert` class, e.g. [important note]{.alert}.
- Use the `.fg` class for custom colour, e.g. [important note]{.fg style="--col: #e64173"}.
- Use the `.bg` class for custom background, e.g. [important note]{.bg style="--col: #f3769c"}.

## Components
### Animate elements with `.fragment`

Fragments are a way to animate elements onto the slide.

::: {.fragment}
Fade in
:::

::: {.fragment .semi-fade-out}
Semi fade out
:::

::: {.fragment .fade-out}
Fade out
:::

::: {.fragment .highlight-red}
Highlight red
:::

<!-- Add vertical space using <br> tag -->
<br>

## Components
### Nested fragments

Fragments can also be nested.

[
[Fade in]{.fragment .fade-in fragment-index=1}
[> Highlight red]{.fragment .highlight-red fragment-index=3}
[> Highlight blue]{.fragment .highlight-blue fragment-index=4}
[> Semi fade out]{.fragment .semi-fade-out fragment-index=5}
]{.fragment .fade-in fragment-index=2}

::: {.fragment .fade-in}
::: {.fragment .highlight-red}
::: {.fragment .semi-fade-out}
Fade in > Highlight red > Semi fade out
:::
:::
:::

## Components

### Cross-references & Citations {#sec-crossref}

To cross-reference, you have several options, for example:

- Beamer-like `.button` class provided by this theme, e.g. [[Appendix]{.button}](#sec-appendix)
- Quarto's native cross-ref syntax, e.g., "See @sec-appendix."
  
Citations follow the standard
[Quarto format](https://quarto.org/docs/authoring/footnotes-and-citations.html#citations)
and be sourced from BibLaTex, BibTeX, or CLS files. For example:

 - [Topic 1:]{.alert} Spatial Frictions [@Fajgelbaum_Morales_Serrato_Zidar_2018; @Hsieh_Moretti_2019; @Moretti_2011]

- [Topic 2:]{.alert} Blah [@SuÃ¡rez_Serrato_Zidar_2016]

## Components

### Blocks

Quarto provides
[dedicated environments](https://quarto.org/docs/authoring/cross-references.html#theorems-and-proofs)
for theorems, lemmas, and so forth. 

But in presentation format, it's arguably more effective just to use a
[Callout Block](https://quarto.org/docs/authoring/callouts.html).

:::{.callout-note}
## Regression Specification

The main specification is as follows:

$$
y_{it} = X_{it} \beta + \mu_i + \varepsilon_{it}
$$
:::

## Components

### Multicolumn I: Text only

:::: {.columns}

::: {.column width="50%"}
#### Column 1

Here is a long sentence that will wrap onto the next line as it hits the column
width, and continue this way until it stops.
:::

::: {.column width="50%"}
#### Column 2

Some other text in another column.

A second paragraph.
:::

::::

Multicolumn support is very flexible and we can continue with a single full
span column in the same slide.

## Components

### Multicolumn II: Text and figures

:::: {.columns}

::: {.column width="50%"}
![](images/kanagawa.jpg)
:::

::: {.column width="50%"}

#### Text about the figure

- A point about the figure that is potentially important.
- Another point about the figure that is also potentially important.
:::

::::

Note that sub- and multi-panel figures are also natively supported by Quarto.
See [here](https://quarto.org/docs/authoring/figures.html#subfigures).

## Components

### Multicolumn III: Code and output

```{r}
#| echo: false
#| label: fig-pairs
#| fig-cap: "Pairwise scatterplot" 
#| fig-asp: 1
#| output-location: column

palette("Classic Tableau")

par(
  family = "HersheySans",
  las = 1, pch = 19, cex = 1.5
)

pairs(
  iris[,1:4],
  col=iris$Species
)
```

## Components {.scrollable}

### Multicolumn IV: Code and output with `tabset`

::: {.panel-tabset}

#### Output 
```{r}
#| echo: false
#| eval: true
#| label: fig-tabset
#| fig-cap: "Pairwise scatterplot" 
#| fig-asp: 1
#| out-width: 90%
palette("Classic Tableau")

par(
  family = "HersheySans",
  las = 1, pch = 19, cex = 1.5
)

pairs(
  iris[,1:4],
  col=iris$Species
)
```

#### Code

```{r}
#| echo: true
#| eval: false
#| label: fig-tabset2
#| output-location: default

palette("Classic Tableau")

par(
  family = "HersheySans",
  las = 1, pch = 19, cex = 1.5
)

pairs(
  iris[,1:4],
  col=iris$Species
)
```
:::

# Tables {background-color="#2d4563"}

## Tables 

### Regression example

Quarto offers excellent
[table support](https://quarto.org/docs/authoring/tables.html),
with further customization via user libraries. Let's illustrate with a
regression example:

```{r}
#| echo: true

library(fixest)

mods = feols(
  rating ~ complaints + privileges + learning + csw0(raises + critical) + advance,
  data = attitude
)

dict = c("rating"     = "Overall Rating",
         "complaints" = "Handling of Complaints",
         "privileges" = "No Special Priviledges",
         "learning"   = "Opportunity to Learn",
         "raises"     = "Performance-Based Raises",
         "critical"   = "Too Critical",
         "advance"    = "Advancement")
```

## Regression table

### modelsummary

If you use `modelsummary` with this Quarto theme, we advise setting the `gt`
backend for a cleaner aesthetic. More details
[here](https://vincentarelbundock.github.io/modelsummary/articles/appearance.html).

```{r}
#| echo: true
#| output-location: slide

library(modelsummary)
options(modelsummary_factory_default = "gt")

modelsummary(
  setNames(mods, c("(1)", "(2)")),
  coef_map = dict, stars = TRUE,
  gof_omit = "Adj|IC|F|Log|RMSE"
  ) |>
  gt::tab_spanner(
    label = "Dependent variable: Overall Rating",
    columns = 2:3
  )
```

## Regression table

### etable

`fixest`'s powerful native tabling functions were designed for LaTeX output. But we
can use the `markdown = TRUE` option to make them work with this theme too. 
(Details
[here](https://lrberge.github.io/fixest/articles/etable_new_features.html).) Quick notes:

 - Install the `tinytex` & `pdftools` packages first.
 - Set the R chunk option `output: asis`. 

````
```{{r}}
#| output: asis

setFixest_etable(markdown = TRUE, drop = "Constant")
setFixest_dict(dict)

etable(mods, highlight = .("se" = "complaints"))
```
````

## Regression table

### etable (cont.)

```{r}
#| output: asis

setFixest_etable(markdown = TRUE, drop = "Constant")
setFixest_dict(dict)

etable(mods, highlight = .("se" = "complaints"), arraystretch = 1.5)
```

# Figures {background-color="#193C4D"}

## Figure

![](images/kanagawa.jpg)

## Figure

### Full-size Figures

You can use the `{.background-image}` container environment to completely fill
the slide background with an image.

Ideally, your figure will be the same aspect ratio as the screen that you're presenting on.

- This can be a bit tricky because of the dynamic nature of reveal.js / HTML. But it's probably something close to 16:9.
- Aspect ratio can also matter for a regular full-frame images (previous slide).

## {background-image="images/kanagawa169.jpg" background-size="100%"}

## Interactive plots

```{r}
#| out-width: 75%

library(threejs)

# Approximate locations as factors
data(flights)
dest = factor(sprintf("%.2f:%.2f", flights[,3], flights[,4]))

# A table of destination frequencies
freq = sort(table(dest), decreasing=TRUE)

# The most frequent destinations in these data
frequent_destinations = names(freq)[1:10]

# Subset the flight data by destination frequency
idx = dest %in% frequent_destinations
frequent_flights = flights[idx, ]

# Lat/long and counts of frequent flights
ll = unique(frequent_flights[, 3:4])

# Plot frequent destinations as bars, and the flights to and from
# them as arcs. Adjust arc width and color by frequency.
globejs(lat=ll[, 1], long=ll[, 2], arcs=frequent_flights,
        # bodycolor="#aaaaff", arcsHeight=0.3, arcsLwd=2,
        bodycolor="#fff", arcsHeight=0.3, arcsLwd=2,
        arcsColor="#ffff00", arcsOpacity=0.15,
        atmosphere=TRUE, color="#fff", pointsize=0.5)
```

_Note: Simple flight data example using `threejs`. There are many interactive
plotting options beyond this.
(More [details](https://quarto.org/docs/interactive/).)_

# Summary {background-color="#193C4D"}

## Summary

### A minimal and elegant presentation theme


The Quarto reveal.js [clean theme](grantmcdermott/quarto-revealjs-clean) aims to
be a minimal and elegant presention theme.

We have highlighted some theme-specific components. But all of the regular reveal.js functionality is supported ([chalkboard](https://quarto.org/docs/presentations/revealjs/presenting.html#chalkboard), etc.)

Install the theme:

```{.bash}
quarto install extension grantmcdermott/quarto-revealjs-clean
```

Use these demo slides as a template:

```{.bash}
quarto use template grantmcdermott/quarto-revealjs-clean-demo
```

## References

::: {#refs}
:::

## Appendix {#sec-appendix}

```{r}
#| label: tbl-attsum
#| tbl-cap: Summary of the base R `attitude` dataset

modelsummary::datasummary_skim(attitude)
```

[[Back to main]{.button}](#sec-crossref)
