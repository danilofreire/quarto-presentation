---
title: Quarto reveal.js clean
subtitle: A minimal and elegant presentation theme
date: last-modified
date-format: "DD MMMM, YYYY"
author:
  - name: Danilo Freire
    orcid: 0000-0002-4712-6810
    email: danilo.freire@emory.edu
    affiliations: Emory University
format:
  clean-revealjs:
    self-contained: true
    code-overflow: wrap
    footer: "[My Presentation](https://danilofreire.github.io/)"
    drop:
      button: true
      engine: pyodide
      pyodide:
        packages:
          - matplotlib
          - micropip
          - numpy
          - pandas
          - seaborn
bibliography: references.bib
transition: slide
transition-speed: default
scrollable: true
engine: jupyter
revealjs-plugins:
  - appearance
  - drop
  - fontawesome
  - multimodal
editor:
  render-on-save: true
---

## Example slide

### This is a subtitle

Before we dive a bit deeper, here is a simple example of the
[clean theme](https://github.com/grantmcdermott/quarto-revealjs-clean)
in action. 

- No pictures or anything fancy. Just text for the moment.

:::{.incremental}
Next, we'll take a brief tour of some theme components.

- We'll use the same basic
structure as the
[original LaTeX slides](https://raw.githack.com/kylebutts/templates/master/latex-slides/auxiliary/slides.pdf).
- Note that the [_full suite_](https://quarto.org/docs/presentations/revealjs/)
of Reveal.js features are available for this Quarto implementation,
even if we don't cover everything here.
:::

## Before you proceed...

### Requirements for the coding examples in this demo

:::{.callout-note}
## R libraries

While the clean theme is language agnostic, we will use several R coding
examples in this demo to highlight some advanced theme features.

You will need the following libraries if you'd like to render the template
"as-is":

```{.r}
install.packages(c("modelsummary", "gt", "fixest", "pdftools", "tinytex", "threejs"))
```
:::


:::{.callout-note}
## TinyTex

While reveal.js presentations are HTML format, we will show an example of how to 
embed LaTeX tables as images. This requires a working Tex distribution, of which
TinyTex provides by far the easiest and lightest integration with Quarto. More
details [here](https://quarto.org/docs/output-formats/pdf-engine.html).

```{.bash}
quarto install tinytex
```
:::

# Components {background-color="#2d4563"}

## Components

### Ordered and Unordered Lists

:::: {.columns}

::: {.column width="50%"}
Here we have an unordered list.

:::{.incremental}
- first item
    - sub-item
- second item
:::
:::

::: {.column width="50%"}
And next we have an ordered one.

:::{.incremental}
1. first item
    i) sub-item
2. second item
:::
:::
::::

## Components

### Alerts & Cross-refs 

To emphasize specific words or text, you can:

- Use the default `.alert` class, e.g. [important note]{.alert}.
- Use the `.fg` class for custom colour, e.g. [important note]{.fg style="--col: #e64173"}.
- Use the `.bg` class for custom background, e.g. [important note]{.bg style="--col: #f3769c"}.

## Components
### Animate elements with `.fragment`

Fragments are a way to animate elements onto the slide.

::: {.fragment}
Fade in
:::

::: {.fragment .semi-fade-out}
Semi fade out
:::

::: {.fragment .fade-out}
Fade out
:::

::: {.fragment .highlight-red}
Highlight red
:::

<!-- Add vertical space using <br> tag -->
<br>

## Components
### Nested fragments

Fragments can also be nested.

[
[Fade in]{.fragment .fade-in fragment-index=1}
[> Highlight red]{.fragment .highlight-red fragment-index=3}
[> Highlight blue]{.fragment .highlight-blue fragment-index=4}
[> Semi fade out]{.fragment .semi-fade-out fragment-index=5}
]{.fragment .fade-in fragment-index=2}

::: {.fragment .fade-in}
::: {.fragment .highlight-red}
::: {.fragment .semi-fade-out}
Fade in > Highlight red > Semi fade out
:::
:::
:::

## Components

### Cross-references & Citations {#sec-crossref}

To cross-reference, you have several options, for example:

- Beamer-like `.button` class provided by this theme, e.g. [[Appendix]{.button}](#sec-appendix)
- Quarto's native cross-ref syntax, e.g., "See @sec-appendix."
  
Citations follow the standard
[Quarto format](https://quarto.org/docs/authoring/footnotes-and-citations.html#citations)
and be sourced from BibLaTex, BibTeX, or CLS files. For example:

 - [Topic 1:]{.alert} Spatial Frictions [@Fajgelbaum_Morales_Serrato_Zidar_2018; @Hsieh_Moretti_2019; @Moretti_2011]

- [Topic 2:]{.alert} Blah [@Su√°rez_Serrato_Zidar_2016]

## Components

### Blocks

Quarto provides
[dedicated environments](https://quarto.org/docs/authoring/cross-references.html#theorems-and-proofs)
for theorems, lemmas, and so forth. 

But in presentation format, it's arguably more effective just to use a
[Callout Block](https://quarto.org/docs/authoring/callouts.html).

:::{.callout-note}
## Regression Specification

The main specification is as follows:

$$
y_{it} = X_{it} \beta + \mu_i + \varepsilon_{it}
$$
:::

## Components

### Multicolumn I: Text only

:::: {.columns}

::: {.column width="50%"}
#### Column 1

Here is a long sentence that will wrap onto the next line as it hits the column
width, and continue this way until it stops.
:::

::: {.column width="50%"}
#### Column 2

Some other text in another column.

A second paragraph.
:::

::::

Multicolumn support is very flexible and we can continue with a single full
span column in the same slide.

## Components

### Multicolumn II: Text and figures

:::: {.columns}

::: {.column width="50%"}
![](figures/kanagawa.jpg)
:::

::: {.column width="50%"}

#### Text about the figure

- A point about the figure that is potentially important.
- Another point about the figure that is also potentially important.
:::

::::

Note that sub- and multi-panel figures are also natively supported by Quarto.
See [here](https://quarto.org/docs/authoring/figures.html#subfigures).

## Components

### Multicolumn III: Code and output

```{python}
#| echo: false
#| label: fig-pairs
#| fig-cap: "Pairwise scatterplot" 
#| fig-asp: 1
#| output-location: column
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib import rcParams

# Set the palette
sns.set_palette("tab10")

# Set the font family and other parameters
rcParams['font.family'] = 'sans-serif'
rcParams['font.sans-serif'] = ['HersheySans']
rcParams['axes.labelsize'] = 12
rcParams['axes.titlesize'] = 14
rcParams['xtick.labelsize'] = 10
rcParams['ytick.labelsize'] = 10

# Load the iris dataset
iris = sns.load_dataset("iris")

# Create the pairwise scatterplot
sns.pairplot(iris, hue="species", markers=["o", "s", "D"])

# Show the plot
plt.show()
```

## Components {.scrollable}

### Multicolumn IV: Code and output with `tabset`

::: {.panel-tabset}

#### Output 
```{python}
#| echo: false
#| eval: true
#| label: fig-tabset
#| fig-cap: "Pairwise scatterplot" 
#| fig-asp: 1
#| out-width: 90%
# Set the palette
sns.set_palette("tab10")

# Set the font family and other parameters
rcParams['font.family'] = 'sans-serif'
rcParams['font.sans-serif'] = ['HersheySans']
rcParams['axes.labelsize'] = 12
rcParams['axes.titlesize'] = 14
rcParams['xtick.labelsize'] = 10
rcParams['ytick.labelsize'] = 10

# Load the iris dataset
iris = sns.load_dataset("iris")

# Create the pairwise scatterplot
sns.pairplot(iris, hue="species", markers=["o", "s", "D"])

# Show the plot
plt.show()
```

#### Code

```{python}
#| echo: true
#| eval: false
#| label: fig-tabset2
#| output-location: default
# Set the palette
sns.set_palette("tab10")

# Set the font family and other parameters
rcParams['font.family'] = 'sans-serif'
rcParams['font.sans-serif'] = ['HersheySans']
rcParams['axes.labelsize'] = 12
rcParams['axes.titlesize'] = 14
rcParams['xtick.labelsize'] = 10
rcParams['ytick.labelsize'] = 10

# Load the iris dataset
iris = sns.load_dataset("iris")

# Create the pairwise scatterplot
sns.pairplot(iris, hue="species", markers=["o", "s", "D"])

# Show the plot
plt.show()
```
:::

# Tables {background-color="#2d4563"}

## Tables 

### Regression example

:::{style="font-size: 22px;"}
Quarto offers excellent [table support](https://quarto.org/docs/authoring/tables.html), with further customization via user libraries. Let's illustrate with a regression example:
:::

:::{style="font-size: 15px;"}

```{python}
#| echo: true
import statsmodels.api as sm
import statsmodels.formula.api as smf
import pandas as pd

# Example data
data = {
    'rating': [1, 2, 3, 4, 5],
    'complaints': [1, 2, 3, 4, 5],
    'privileges': [1, 2, 3, 4, 5],
    'learning': [1, 2, 3, 4, 5],
    'raises': [1, 2, 3, 4, 5],
    'critical': [1, 2, 3, 4, 5],
    'advance': [1, 2, 3, 4, 5]
}
attitude = pd.DataFrame(data)

# Fit the model
formula = 'rating ~ complaints + privileges + learning + raises + critical + advance'
model = smf.ols(formula=formula, data=attitude).fit()

# Coefficient mapping dictionary
coef_map = {
    "rating": "Overall Rating",
    "complaints": "Handling of Complaints",
    "privileges": "No Special Privileges",
    "learning": "Opportunity to Learn",
    "raises": "Performance-Based Raises",
    "critical": "Too Critical",
    "advance": "Advancement"
}
```
:::

## Regression table

:::{style="font-size: 16px;"}
```{python}
#| label: tbl-regression
#| tbl-cap: Regression results for the `attitude` dataset
#| tbl-attr: {style="width: 80%"}

# Create a DataFrame for the table
from stargazer.stargazer import Stargazer
from IPython.core.display import HTML

# Fit the model
formula = 'rating ~ complaints + privileges + learning + raises + critical + advance'
model = smf.ols(formula=formula, data=attitude).fit()

# Create a Stargazer object
stargazer = Stargazer([model])

# Set the custom labels
stargazer.rename_covariates(coef_map)

# Generate the HTML table
html_table = stargazer.render_html()

# Display the HTML table (for Jupyter Notebook)
display(HTML(html_table))
```
:::

# Figures {background-color="#193C4D"}

## Figure

![](figures/kanagawa.jpg)

## Figure

### Full-size Figures

You can use the `{.background-image}` container environment to completely fill
the slide background with an image.

Ideally, your figure will be the same aspect ratio as the screen that you're presenting on.

- This can be a bit tricky because of the dynamic nature of reveal.js / HTML. But it's probably something close to 16:9.
- Aspect ratio can also matter for a regular full-frame images (previous slide).

## {background-image="figures/kanagawa169.jpg" background-size="100%"}

## Interactive plots

```{python}
#| out-width: 75%
from ipyleaflet import Map, Marker, basemaps, basemap_to_tiles
m = Map(
  basemap=basemap_to_tiles(
    basemaps.NASAGIBS.ModisTerraTrueColorCR, "2017-04-08"
  ),
  center=(52.204793, 360.121558),
  zoom=4
)
m.add_layer(Marker(location=(52.204793, 360.121558)))
m
```

Note: More [details here](https://quarto.org/docs/interactive/).

# Font Awesome {background-color="#193C4D"}

## Font Awesome

This theme also includes the [Font Awesome](https://fontawesome.com/) icon set
Just use the `fa` class and the icon name: {{< fa thumbs-up >}} {{< fa brands bluetooth >}}

# Drop {background-color="#193C4D"}

## Drop

If you want to toggle a Python terminal in your presentation, you can use the [`drop` plugin](https://github.com/r-wasm/quarto-drop)

You can toggle the terminal with the backtick key (` ` `) or with the button below

In this template, the plugin also comes with `matplotlib`, `numpy`, and `pandas` pre-installed

You still need to import them in the terminal, though 

# Pyodide {background-color="#193C4D"}

## Pyodide

If you want to run Python code in your presentation, you can use the `pyodide` engine. Click on the terminal button on the bottom left to open a Python terminal.

# Appearance {background-color="#193C4D"}

## Appearance

This presentation theme also includes the [Appearance plugin](). You can use it to animate elements on your slides.

1. [This is a list item]{.animate__fadeInLeft data-appear-parent="true"}
2. [This is a list item]{.animate__fadeInLeft data-appear-parent="true" data-delay="100"}
3. [Split into words]{.animate__fadeInDown data-split="words" data-appear-parent="true" data-delay="250"}
4. [Split into letters]{.animate__fadeInDown data-split="letters" data-appear-parent="true" data-delay="500"}

# Multimodal {background-color="#193C4D"}

## Multimodal

Multimodel can be used to showcase images, videos or code in your presentation.

[Show figure](#){data-modal-type="image" data-modal-url="figures/2.jpg"}

[Link to a Markdown file](#){data-modal-type="html" data-modal-url="figures/example.md" data-modal-class="textleft"}

[Link to an external website](https://www.wikipedia.org){data-modal-type="iframe"}

[Link to a Youtube video](#){data-modal-type="iframe" data-modal-url="https://www.youtube.com/embed/dQw4w9WgXcQ?&autoplay=1"}

Please refer to the `quarto-presentation.qmd` file for the code to generate these multimodal elements.

## References

::: {#refs}
:::

## Appendix {#sec-appendix}

```{r}
#| label: tbl-attsum
#| tbl-cap: Summary of the base R `attitude` dataset

modelsummary::datasummary_skim(attitude)
```

[[Back to main]{.button}](#sec-crossref)
